
Styrenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052b  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016a  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ea  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0d d0       	rcall	.+26     	; 0xb4 <main>
  9a:	9c c0       	rjmp	.+312    	; 0x1d4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <initMotorPWM>:
void rotateLeft() {
	PORTD = (1<<3)|(1<<6);
}

void rotateRight() {
	PORTD = (0<<3)|(0<<6);
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 6a       	ori	r24, 0xA1	; 161
  a6:	80 83       	st	Z, r24
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	89 60       	ori	r24, 0x09	; 9
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <main>:
int main(void)
{
	//unsigned int counter = 0;
	// unsigned int i;
	// Initializes the PWM signal output for the motors.
	initMotorPWM();
  b4:	f4 df       	rcall	.-24     	; 0x9e <initMotorPWM>
	DDRD |= 0x78; // 0111_1000;
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	88 67       	ori	r24, 0x78	; 120
  ba:	8a b9       	out	0x0a, r24	; 10
	OCR1A = leftSpeed; 
	OCR1B = rightSpeed; 
}

void forward() {
	PORTD = (1<<3)|(0<<6);
  bc:	48 e0       	ldi	r20, 0x08	; 8

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
  be:	a8 e8       	ldi	r26, 0x88	; 136
  c0:	b0 e0       	ldi	r27, 0x00	; 0
	OCR1B = rightSpeed; 
  c2:	ea e8       	ldi	r30, 0x8A	; 138
  c4:	f0 e0       	ldi	r31, 0x00	; 0

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
  c6:	86 e9       	ldi	r24, 0x96	; 150
  c8:	90 e0       	ldi	r25, 0x00	; 0
void forward() {
	PORTD = (1<<3)|(0<<6);
}

void reverse() {
	PORTD = (0<<3)|(1<<6);
  ca:	30 e4       	ldi	r19, 0x40	; 64
}

void rotateLeft() {
	PORTD = (1<<3)|(1<<6);
  cc:	28 e4       	ldi	r18, 0x48	; 72
	OCR1A = leftSpeed; 
	OCR1B = rightSpeed; 
}

void forward() {
	PORTD = (1<<3)|(0<<6);
  ce:	4b b9       	out	0x0b, r20	; 11

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	1c 92       	st	X, r1
  d4:	1e 92       	st	-X, r1
	OCR1B = rightSpeed; 
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	5f e7       	ldi	r21, 0x7F	; 127
  dc:	6a e1       	ldi	r22, 0x1A	; 26
  de:	76 e0       	ldi	r23, 0x06	; 6
  e0:	51 50       	subi	r21, 0x01	; 1
  e2:	60 40       	sbci	r22, 0x00	; 0
  e4:	70 40       	sbci	r23, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x2c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x36>
  ea:	00 00       	nop

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	9c 93       	st	X, r25
  f0:	8e 93       	st	-X, r24
	OCR1B = rightSpeed; 
  f2:	91 83       	std	Z+1, r25	; 0x01
  f4:	80 83       	st	Z, r24
  f6:	5f eb       	ldi	r21, 0xBF	; 191
  f8:	67 e2       	ldi	r22, 0x27	; 39
  fa:	79 e0       	ldi	r23, 0x09	; 9
  fc:	51 50       	subi	r21, 0x01	; 1
  fe:	60 40       	sbci	r22, 0x00	; 0
 100:	70 40       	sbci	r23, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x48>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x52>
 106:	00 00       	nop

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	1c 92       	st	X, r1
 10c:	1e 92       	st	-X, r1
	OCR1B = rightSpeed; 
 10e:	11 82       	std	Z+1, r1	; 0x01
 110:	10 82       	st	Z, r1
 112:	5f e7       	ldi	r21, 0x7F	; 127
 114:	6a e1       	ldi	r22, 0x1A	; 26
 116:	76 e0       	ldi	r23, 0x06	; 6
 118:	51 50       	subi	r21, 0x01	; 1
 11a:	60 40       	sbci	r22, 0x00	; 0
 11c:	70 40       	sbci	r23, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x64>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x6e>
 122:	00 00       	nop
void forward() {
	PORTD = (1<<3)|(0<<6);
}

void reverse() {
	PORTD = (0<<3)|(1<<6);
 124:	3b b9       	out	0x0b, r19	; 11

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	9c 93       	st	X, r25
 12a:	8e 93       	st	-X, r24
	OCR1B = rightSpeed; 
 12c:	91 83       	std	Z+1, r25	; 0x01
 12e:	80 83       	st	Z, r24
 130:	5f eb       	ldi	r21, 0xBF	; 191
 132:	67 e2       	ldi	r22, 0x27	; 39
 134:	79 e0       	ldi	r23, 0x09	; 9
 136:	51 50       	subi	r21, 0x01	; 1
 138:	60 40       	sbci	r22, 0x00	; 0
 13a:	70 40       	sbci	r23, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x82>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x8c>
 140:	00 00       	nop

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 142:	11 96       	adiw	r26, 0x01	; 1
 144:	1c 92       	st	X, r1
 146:	1e 92       	st	-X, r1
	OCR1B = rightSpeed; 
 148:	11 82       	std	Z+1, r1	; 0x01
 14a:	10 82       	st	Z, r1
 14c:	5f e7       	ldi	r21, 0x7F	; 127
 14e:	6a e1       	ldi	r22, 0x1A	; 26
 150:	76 e0       	ldi	r23, 0x06	; 6
 152:	51 50       	subi	r21, 0x01	; 1
 154:	60 40       	sbci	r22, 0x00	; 0
 156:	70 40       	sbci	r23, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x9e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xa8>
 15c:	00 00       	nop
void reverse() {
	PORTD = (0<<3)|(1<<6);
}

void rotateLeft() {
	PORTD = (1<<3)|(1<<6);
 15e:	2b b9       	out	0x0b, r18	; 11

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 160:	11 96       	adiw	r26, 0x01	; 1
 162:	9c 93       	st	X, r25
 164:	8e 93       	st	-X, r24
	OCR1B = rightSpeed; 
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	80 83       	st	Z, r24
 16a:	5f eb       	ldi	r21, 0xBF	; 191
 16c:	67 e2       	ldi	r22, 0x27	; 39
 16e:	79 e0       	ldi	r23, 0x09	; 9
 170:	51 50       	subi	r21, 0x01	; 1
 172:	60 40       	sbci	r22, 0x00	; 0
 174:	70 40       	sbci	r23, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xbc>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xc6>
 17a:	00 00       	nop

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	1c 92       	st	X, r1
 180:	1e 92       	st	-X, r1
	OCR1B = rightSpeed; 
 182:	11 82       	std	Z+1, r1	; 0x01
 184:	10 82       	st	Z, r1
 186:	5f e7       	ldi	r21, 0x7F	; 127
 188:	6a e1       	ldi	r22, 0x1A	; 26
 18a:	76 e0       	ldi	r23, 0x06	; 6
 18c:	51 50       	subi	r21, 0x01	; 1
 18e:	60 40       	sbci	r22, 0x00	; 0
 190:	70 40       	sbci	r23, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xd8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xe2>
 196:	00 00       	nop
void rotateLeft() {
	PORTD = (1<<3)|(1<<6);
}

void rotateRight() {
	PORTD = (0<<3)|(0<<6);
 198:	1b b8       	out	0x0b, r1	; 11

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 19a:	11 96       	adiw	r26, 0x01	; 1
 19c:	9c 93       	st	X, r25
 19e:	8e 93       	st	-X, r24
	OCR1B = rightSpeed; 
 1a0:	91 83       	std	Z+1, r25	; 0x01
 1a2:	80 83       	st	Z, r24
 1a4:	5f eb       	ldi	r21, 0xBF	; 191
 1a6:	67 e2       	ldi	r22, 0x27	; 39
 1a8:	79 e0       	ldi	r23, 0x09	; 9
 1aa:	51 50       	subi	r21, 0x01	; 1
 1ac:	60 40       	sbci	r22, 0x00	; 0
 1ae:	70 40       	sbci	r23, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xf6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x100>
 1b4:	00 00       	nop

	
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
	OCR1A = leftSpeed; 
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	1c 92       	st	X, r1
 1ba:	1e 92       	st	-X, r1
	OCR1B = rightSpeed; 
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	10 82       	st	Z, r1
 1c0:	5f e7       	ldi	r21, 0x7F	; 127
 1c2:	6a e1       	ldi	r22, 0x1A	; 26
 1c4:	76 e0       	ldi	r23, 0x06	; 6
 1c6:	51 50       	subi	r21, 0x01	; 1
 1c8:	60 40       	sbci	r22, 0x00	; 0
 1ca:	70 40       	sbci	r23, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x112>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x11c>
 1d0:	00 00       	nop
 1d2:	7d cf       	rjmp	.-262    	; 0xce <main+0x1a>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
